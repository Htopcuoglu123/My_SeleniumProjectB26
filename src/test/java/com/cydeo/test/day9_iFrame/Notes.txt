
Q: What is an iframe?
A:  - An iframe is HTML within another HTML page.
   - Most of the time it is used to create independent sections in a page for advertisements, maps, video content or anything independent.

Q: How do we handle iframes?
A: - Selenium WebDriver can focus on one thing at a time.
   - Therefore we must switch its focus from the default <html> to iframe <html> before being able to do any action inside of it.

Q: What happens if we do not switch to inner frame?
A: If we try to locate any web element before switching, we will get NoSuchElementException

Q: How many ways we have to switch to inner iframe?
A: 3

 #1- by index:
        - starts from 0
        - we count

    syntax: driver.switchTo().frame(index);

 #2- by id-name value
        - if there is id or name attribute we can just pass their values as a string

    syntax: driver.switchTo().frame("id-name value");

 #3- by locating it as a web element
        - we locate the iframe tag itself as a web element and pass it into the method.

    syntax: driver.switchTo().frame(WebElement);
    syntax: driver.switchTo().frame(driver.findElement(By.locator));













Q: How do we go switch driver's focus to default iframe?

A: - driver.switchTo().parentFrame(); // if you have nested frame and if you want to switch 1 frame to direct parent of this frame we are using parentFrame() method

   - driver.switchTo().defaultContent(); // defaultContent() method will switch to main HTML (Parent of all HTML)


 1    <html>

2        <html>
3            <html> --> driver.switchTo().parentFrame(); --> will focus to 2
            </html> --> driver.switchTo().defaultContent(); --> will focus to #1
        </html>

4        <html>  --> driver.switchTo().parentFrame(); --> will focus to #1
        </html> --> driver.switchTo().defaultContent(); --> will focus to #1


    <html>

- The only time parentFrame() method and defaultContent() method will make any difference in use is if we have iframe inside of another iframe.
- Otherwise if we have 1 layer of iframe they will both switch back to default html







Create CRM_Utilities class
Windows Handling
Create Browser_Utilities class
Q: How do we handle dynamic web elements with XPATH and CSSSELECTOR ?
A: #1- I can locate a parent/child that is not dynamic and move from there
#2- I will use the methods provided by - xpath: contains(), starts-
with(), ends-with()
cssSelector : contains --> *
starts-with --> ^
ends-with --> $
xpath  --> //tagName[contains(@attribute, 'value')]
cssSelector --> tagName[attribute* = 'value']
xpath  --> //tagName[starts-with(@attribute, 'value')]
cssSelector --> tagName[attribute^ = 'value']
xpath  --> //tagName[ends-with(@attribute , 'value')]
cssSelector --> tagName[attribute$ = 'value']

Q: How do we go from sibling to sibling?
A: - There are two methods for going from sibling to sibling
"/preceding-sibling::tagName" will go to the sibling that comes
before
"/following-sibling::tagName" will go to the sibling that comes
after
The web element we locate will become the starting point (point 0).


We decide whether we want to go preceding or following sibling.
We count and we pass the index number.
//tagName[@attribute='value']/preceding-sibling::tagName[index]
//tagName[@attribute='value']/following-sibling::tagName[index]
ex:    //option[@value='3']
<select>
2        <option value="1"> Orange 1</option>
1        <option value="2"> Orange 2</option>
0        <option value="3"> Orange 3</option>
1        <option value="4"> Orange 4</option>
2        <option value="5"> Orange 5</option>


</select>
//option[@value='3']/preceding-sibling::option[1] --> this will point to
Orange 1
//option[@value='3']/following-sibling::option[2] --> this will point to
Orange 5
ex #1: locate month May using its value
(//option[@value='4'])[1]





ex #2: locate month of March using May locator as a base and use sibling
method
(//option[@value='4'])[1]/preceding-sibling::option[2]
ex #3: locate month of October using May locator as a base and use sibling
method
(//option[@value='4'])[1]/following-sibling::option[5]
WINDOWS:
Q: Is there any difference for selenium if it is a tab or window?
A: No. Regardless if it is a window or a tab it is all a WINDOW for
Selenium.
Q: How does Selenium knows which window is different from which?
A: WindowHandles


Q: What is a window handle?
A: A randomly generated unique alphanumeric ID for each window.
Q: Every window has their own window handle randomly generated by
selenium.
A: We don't have to do anything special for it.
Q: How do we get the current window's handle?
A: .getWindowHandle();
Q: What is the return type?
A: - String
It will capture and return the current windows handle as a String.



Q: How do we get all of the currently opened windows' handles?
A: .getWindowHandles();
Q: What is the return type?
A: Set <String>
Selenium will only return the window handles from the currently
executed session.
Syntax: driver.switchTo().window(windowHandle)



